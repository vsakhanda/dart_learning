void main() {
  print("feat(DART-06): initial commit");
  print("second raw");
  print("*********************");
  firstTask();
  secondTask();
  thirdTask();
  fourthTask();
  fifthTask();
  sixthTask();
  seventhTask();
  eighthTask();
  ninthTask();
  tenthTask();
}

void firstTask() {
  print('**Task one: Mathematical operators**');
  final double length = 18.4;
  final double heigth = 30.9;

  var area = length * heigth;
  var perimeter = 2 * (length + heigth);

  print(
    'If lenght is $length milimeters and height is $heigth milimeters. \n Area of the rectangle will be equel to $area.  \nPerimeter of the rectangle wiil be $perimeter',
  );

  var proximateSqure = area ~/ 1;

  print('Approximate area of the rectangle is $proximateSqure ');
  print('*********************');
}

void secondTask() {
  print('**Task two: Comparison operators**');

  final double number = 32;
  final cash = 50;
  final deposit = 100;
  final double divisor = 8;

  print('number == cash: ${number >= cash}');
  print('number == deposit: ${number <= deposit}');
  print('remainder number / $divisor: ${number % divisor == 0}');
  // TO DO analize functionality of deviding
  // double devide = ((number % divisor) - (number / divisor));
  // double div1 = (number % divisor);
  // double div2 = (number / divisor);
  // print('div 1 - $div1');
  // print('div 2 - $div2');

  // print('$devide');
  // print('number / $divisor: ${devide == 0}');
  print('*********************');
}

void thirdTask() {
  print('**Task three: Logical operators**');

  final bool hasMoney = true;
  final bool isOpen = false;

  final bool canIBuy = (hasMoney && isOpen);
  final bool shouldIWait = hasMoney && !isOpen;

  print(
    '–ß–∏ –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ –ø–æ–∫—É–ø–∫—É (—è–∫—â–æ —î –≥—Ä–æ—à—ñ —Ç–∞ –º–∞–≥–∞–∑–∏–Ω –≤—ñ–¥–∫—Ä–∏—Ç–∏–π)? $canIBuy',
  );
  print(
    '–ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ—á–µ–∫–∞—Ç–∏ (—è–∫—â–æ –º–∞–≥–∞–∑–∏–Ω –∑–∞–∫—Ä–∏—Ç–∏–π –∞–±–æ–Ω–µ–º–∞—î –≥—Ä–æ—à–µ–π)? $shouldIWait',
  );

  print("*********************");
}

void fourthTask() {
  print('**Task four: Ternary Operators**');

  final temperature = 27;

  print('–°—å–æ–≥–æ–¥–Ω—ñ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞ –≤—É–ª–∏—Ü—ñ $temperature –≥—Ä–∞–¥—É—Å—ñ–≤ –∑–∞ —Ü–µ–ª—å—Å—ñ—î–º');
  // String mood ;
  if (temperature > 25) {
    print('–í—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è –¢–µ–ø–ª–æ');
  } else {
    print('–í—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è –ü—Ä–æ—Ö–æ–ª–æ–¥–Ω–æ');
  }
  ;

  var extremeTernary =
      (temperature < 10)
          ? '–í—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è –î—É–∂–µ —Ö–æ–ª–æ–¥–Ω–æ'
          : '–í—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è –ü—Ä–æ—Ö–æ–ª–æ–¥–Ω–æ';
  print(extremeTernary);

  print("*********************");
}

void fifthTask() {
  print('**Task Five: Assignment Operators**');

  double score = 0;
  final double correctAnswers = 17;
  final double mistakes = 3;
  final double totalQuestions = 20;

  score += correctAnswers * 10;
  score -= mistakes * 5;
  score *= 2;
  score /= totalQuestions;

  print('–ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ $score');
  print('*********************');
}

void sixthTask() {
  print('**Task Six: IfElse Statements**');

  var examScore = 19;

  if (examScore >= 90) {
    print('–í—ñ–¥–º—ñ–Ω–Ω–æ');
  } else if (examScore >= 75) {
    print('–î–æ–±—Ä–µ');
  } else if (examScore >= 60) {
    print('–ó–∞–¥–æ–≤—ñ–ª—å–Ω–æ');
  } else if (examScore >= 20) {
    print('–ù–µ –∑–¥–∞–Ω–æ');
  } else {
    print('–ü–æ–≤—Ç–æ—Ä–Ω–∏–π –∫—É—Ä—Å');
  }

  print('*********************');
}

void seventhTask() {
  print('**Task Seven: Switch  Statements**');

  var dayNumber = 7;

  switch (dayNumber) {
    case 1:
      print('–ø–æ–Ω–µ–¥—ñ–ª–æ–∫');
    case 2:
      print('–í—ñ–≤—Ç–æ—Ä–æ–∫');
    case 3:
      print('–°–µ—Ä–µ–¥–∞');
    case 4:
      print('–ß–µ—Ç–≤–µ—Ä');
    case 5:
      print("–ü'—è—Ç–Ω–∏—Ü—è");
    case 6:
      print('–°—É–±–æ—Ç–∞. –í–∏—Ö—ñ–¥–Ω–∏–π –¥–µ–Ω—å üéâ');
    case 7:
      print('–ù–µ–¥—ñ–ª—è. –í–∏—Ö—ñ–¥–Ω–∏–π –¥–µ–Ω—å üéâ');
    default:
      print('–í–≤–µ–¥–µ–Ω–∏–π –Ω–µ –≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –¥–Ω—è —Ç–∏–∂–Ω—è');
  }

  print("*********************");
  }

void eighthTask() {
  print('**Task Eight: For loop**');

  int total = 0;

  for (int i = 1; i <= 10; i++) {
    print('–ß–∏—Å–ª–æ: $i');
  }

  print('** –£–º–æ–≤–∞ –≤ —Ü–∏–∫–ª—ñ **');
  for (int i = 1; i <= 10; i++) {
    if (i % 2 == 0) {
      print('–ß–∏—Å–ª–æ: $i —â–æ –¥—ñ–ª—å—Ç—å—Å—è –Ω–∞ 2');
    } else {
      continue;
    }
  }

  print('** –£–º–æ–≤–∞ –≤ —Ü–∏–∫–ª—ñ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º continue **');
  for (int i = 1; i <= 10; i++) {
    if (i % 2 != 0) {
      continue;
    } else {
      print('–ß–∏—Å–ª–æ: $i —â–æ –¥—ñ–ª—å—Ç—å—Å—è –Ω–∞ 2');
    }
  }

  for (int i = 1; i <= 10; i++) {
    total = total + i;
    // print('–°—É–º–∞ —á–∏—Å–ª–µ: –¥–æ $i and $total');
  }
  print('–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ —á–∏—Å–µ–ª $total');
  print("*********************");
}

void ninthTask() {
  print('**Task Nine: while loop**');
  int counter = 10;
  while (counter >= 1) {
    if (counter % 2 == 0) {
      print('–ü–∞—Ä–Ω–µ —á–∏—Å–ª–æ: $counter –¥—ñ–ª–∏—Ç—å—Å—è –Ω–∞ 2');
    } else {
      print('–ù–µ–ø–∞—Ä–Ω–µ —á–∏—Å–ª–æ: $counter –Ω–µ –¥—ñ–ª–∏—Ç—å—Å—è –Ω–∞ 2');
    }
    counter--;
  }
  print("*********************");
}

void tenthTask() {
  print('**Task ten: Break and Continue**');
  
    for (int i = 0; i < 20; i++) {
      if (i % 3 == 0) {
        continue;
      }
      if (i >= 15) {
        print('–ó–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–µ –∑–Ω–∞—á–µ–Ω–Ω—è, –≤–∏—Ö—ñ–¥.');
        break;
      }
      print('–ü–æ—Ç–æ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è: $i');
    }
    print("*********************");
    return;
}
